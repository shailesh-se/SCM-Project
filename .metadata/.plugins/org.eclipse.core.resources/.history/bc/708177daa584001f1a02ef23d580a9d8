package com.example.demo.config;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

import com.example.demo.services.Impl.SecurityCustomUserDetailService;

@Configuration
public class securityConfig {

    // @Bean
    // public UserDetailsService userDetailsService() {
    //     // Correct usage of withDefaultPasswordEncoder()
    //     UserDetails user = User.withDefaultPasswordEncoder() // This returns a User.UserBuilder
    //             .username("admin123") // Set username
    //             .password("admin123") // Set plain password, which will be encoded
    //             .roles("ADMIN", "USER") // Set roles
    //             .build(); // Build the UserDetails object

    //     // In-memory user details manager
    //     return new InMemoryUserDetailsManager(user);
    // }
	
	@Autowired
	private SecurityCustomUserDetailService userDetailService;
	
	@Bean
	public AuthenticationProvider authenticationProvider() {
		DaoAuthenticationProvider daoAuthenticationProvider = new DaoAuthenticationProvider();
		//User Detail Service object
		daoAuthenticationProvider.setUserDetailsService(userDetailService);
		//User Password Encoder object
		daoAuthenticationProvider.setPasswordEncoder(passwordEncoder());
		
		return daoAuthenticationProvider;
	}
	
	@Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder(); // Uses bcrypt for encoding passwords
    }
}
